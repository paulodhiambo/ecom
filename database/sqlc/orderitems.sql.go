// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: orderitems.sql

package database

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items(order_id, product_id, quantity)
VALUES ($1, $2, $3)
RETURNING order_id, product_id, quantity
`

type CreateOrderItemParams struct {
	OrderID   int64 `json:"order_id"`
	ProductID int64 `json:"product_id"`
	Quantity  int32 `json:"quantity"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem, arg.OrderID, arg.ProductID, arg.Quantity)
	var i OrderItem
	err := row.Scan(&i.OrderID, &i.ProductID, &i.Quantity)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE
FROM order_items
WHERE order_id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, orderID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, orderID)
	return err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT order_id, product_id, quantity
FROM order_items
WHERE order_id = $1
LIMIT 1
`

func (q *Queries) GetOrderItem(ctx context.Context, orderID int64) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItem, orderID)
	var i OrderItem
	err := row.Scan(&i.OrderID, &i.ProductID, &i.Quantity)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT order_id, product_id, quantity
FROM order_items
ORDER BY order_id
LIMIT $1 OFFSET $2
`

type ListOrderItemsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderItems(ctx context.Context, arg ListOrderItemsParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItems, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(&i.OrderID, &i.ProductID, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :exec
UPDATE order_items
SET quantity = $2
WHERE order_id = $1
RETURNING order_id, product_id, quantity
`

type UpdateOrderItemParams struct {
	OrderID  int64 `json:"order_id"`
	Quantity int32 `json:"quantity"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderItem, arg.OrderID, arg.Quantity)
	return err
}
