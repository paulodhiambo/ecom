// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: country.sql

package database

import (
	"context"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries(code, name, continent_name)
VALUES ($1, $2, $3)
RETURNING code, name, continent_name
`

type CreateCountryParams struct {
	Code          string `json:"code"`
	Name          string `json:"name"`
	ContinentName string `json:"continent_name"`
}

func (q *Queries) CreateCountry(ctx context.Context, arg CreateCountryParams) (Country, error) {
	row := q.db.QueryRowContext(ctx, createCountry, arg.Code, arg.Name, arg.ContinentName)
	var i Country
	err := row.Scan(&i.Code, &i.Name, &i.ContinentName)
	return i, err
}

const deleteCountry = `-- name: DeleteCountry :exec
DELETE
FROM countries
WHERE code = $1
`

func (q *Queries) DeleteCountry(ctx context.Context, code string) error {
	_, err := q.db.ExecContext(ctx, deleteCountry, code)
	return err
}

const getCountry = `-- name: GetCountry :one
SELECT code, name, continent_name
FROM countries
WHERE code = $1
LIMIT 1
`

func (q *Queries) GetCountry(ctx context.Context, code string) (Country, error) {
	row := q.db.QueryRowContext(ctx, getCountry, code)
	var i Country
	err := row.Scan(&i.Code, &i.Name, &i.ContinentName)
	return i, err
}

const listCountries = `-- name: ListCountries :many
SELECT code, name, continent_name
FROM countries
ORDER BY code
LIMIT $1 OFFSET $2
`

type ListCountriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCountries(ctx context.Context, arg ListCountriesParams) ([]Country, error) {
	rows, err := q.db.QueryContext(ctx, listCountries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Country
	for rows.Next() {
		var i Country
		if err := rows.Scan(&i.Code, &i.Name, &i.ContinentName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCountry = `-- name: UpdateCountry :exec
UPDATE countries
SET name = $2
WHERE code = $1
RETURNING code, name, continent_name
`

type UpdateCountryParams struct {
	Code string `json:"code"`
	Name string `json:"name"`
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) error {
	_, err := q.db.ExecContext(ctx, updateCountry, arg.Code, arg.Name)
	return err
}
