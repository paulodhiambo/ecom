// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: merchants.sql

package database

import (
	"context"
	"time"
)

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants(id, merchant_name, country_code, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, merchant_name, country_code, created_at, updated_at
`

type CreateMerchantParams struct {
	ID           int64     `json:"id"`
	MerchantName string    `json:"merchant_name"`
	CountryCode  string    `json:"country_code"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, createMerchant,
		arg.ID,
		arg.MerchantName,
		arg.CountryCode,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.MerchantName,
		&i.CountryCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMerchant = `-- name: DeleteMerchant :exec
DELETE
FROM merchants
WHERE id = $1
`

func (q *Queries) DeleteMerchant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMerchant, id)
	return err
}

const getMerchant = `-- name: GetMerchant :one
SELECT id, merchant_name, country_code, created_at, updated_at
FROM merchants
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMerchant(ctx context.Context, id int64) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchant, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.MerchantName,
		&i.CountryCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMerchants = `-- name: ListMerchants :many
SELECT id, merchant_name, country_code, created_at, updated_at
FROM merchants
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListMerchantsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMerchants(ctx context.Context, arg ListMerchantsParams) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, listMerchants, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Merchant{}
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.MerchantName,
			&i.CountryCode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMerchant = `-- name: UpdateMerchant :exec
UPDATE merchants
SET merchant_name = $2
WHERE id = $1
RETURNING id, merchant_name, country_code, created_at, updated_at
`

type UpdateMerchantParams struct {
	ID           int64  `json:"id"`
	MerchantName string `json:"merchant_name"`
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) error {
	_, err := q.db.ExecContext(ctx, updateMerchant, arg.ID, arg.MerchantName)
	return err
}
